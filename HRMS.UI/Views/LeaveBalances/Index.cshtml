@model PagedResult<LeaveBalanceDto>

@{
    ViewData["Title"] = "Leave Balances";
    string searchTerm = ViewBag.SearchTerm as string ?? string.Empty;
    string currentSort = ViewBag.CurrentSort as string ?? "empNoAsc";
    int currentPageSize = ViewBag.CurrentPageSize is int size ? size : (Model?.PageSize ?? PagedRequest.DefaultPageSize);
    int currentPage = ViewBag.CurrentPage is int pageValue ? pageValue : (Model?.Page ?? PagedRequest.DefaultPage);
    var pageSizeOptions = new[] { 10, 25, 50 };
    string empNoSort = currentSort == "empNoAsc" ? "empNoDesc" : "empNoAsc";
    string annualSort = currentSort == "annualAsc" ? "annualDesc" : "annualAsc";
    string sickSort = currentSort == "sickAsc" ? "sickDesc" : "sickAsc";
    string unpaidSort = currentSort == "unpaidAsc" ? "unpaidDesc" : "unpaidAsc";
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h1 class="h3 mb-0">Leave Balances</h1>
    <a class="btn btn-primary" asp-action="Create">Create Leave Balance</a>
</div>

@if (TempData["Success"] is string successMessage && !string.IsNullOrWhiteSpace(successMessage))
{
    <div class="alert alert-success" role="alert">@successMessage</div>
}

@if (ViewData["ErrorMessage"] is string errorMessage)
{
    <div class="alert alert-danger" role="alert">@errorMessage</div>
}

<form method="get" class="card shadow-sm mb-4">
    <div class="card-body">
        <div class="row g-3 align-items-end">
            <div class="col-sm-4">
                <label for="searchTerm" class="form-label">Search by Employee No</label>
                <input type="text" id="searchTerm" name="searchTerm" class="form-control" value="@searchTerm" placeholder="e.g. EMP001" />
            </div>
            <div class="col-sm-3 col-md-2">
                <label for="pageSize" class="form-label">Page Size</label>
                <select id="pageSize" name="pageSize" class="form-select">
                    @foreach (var option in pageSizeOptions)
                    {
                        <option value="@option" selected="@(currentPageSize == option)">
                            @option
                        </option>

                    }
                </select>
            </div>
            <div class="col-sm-5 col-md-4 d-flex gap-2">
                <input type="hidden" name="sortOrder" value="@currentSort" />
                <button type="submit" class="btn btn-outline-primary">Apply</button>
                <a class="btn btn-outline-secondary" asp-action="Index">Reset</a>
            </div>
        </div>
    </div>
</form>

@if (Model?.Items?.Any() == true)
{
    <div class="table-responsive">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-light">
                <tr>
                    <th>
                        <a class="text-decoration-none text-reset" asp-action="Index" asp-route-sortOrder="@empNoSort" asp-route-searchTerm="@searchTerm" asp-route-page="@currentPage" asp-route-pageSize="@currentPageSize">
                            Employee No
                            @if (currentSort.StartsWith("empNo", global::System.StringComparison.OrdinalIgnoreCase))
                            {
                                <span class="ms-1 text-muted">@(currentSort == "empNoAsc" ? "▲" : "▼")</span>
                            }
                        </a>
                    </th>
                    <th class="text-end">
                        <a class="text-decoration-none text-reset" asp-action="Index" asp-route-sortOrder="@annualSort" asp-route-searchTerm="@searchTerm" asp-route-page="@currentPage" asp-route-pageSize="@currentPageSize">
                            Annual
                            @if (currentSort.StartsWith("annual", global::System.StringComparison.OrdinalIgnoreCase))
                            {
                                <span class="ms-1 text-muted">@(currentSort == "annualAsc" ? "▲" : "▼")</span>
                            }
                        </a>
                    </th>
                    <th class="text-end">
                        <a class="text-decoration-none text-reset" asp-action="Index" asp-route-sortOrder="@sickSort" asp-route-searchTerm="@searchTerm" asp-route-page="@currentPage" asp-route-pageSize="@currentPageSize">
                            Sick
                            @if (currentSort.StartsWith("sick", global::System.StringComparison.OrdinalIgnoreCase))
                            {
                                <span class="ms-1 text-muted">@(currentSort == "sickAsc" ? "▲" : "▼")</span>
                            }
                        </a>
                    </th>
                    <th class="text-end">
                        <a class="text-decoration-none text-reset" asp-action="Index" asp-route-sortOrder="@unpaidSort" asp-route-searchTerm="@searchTerm" asp-route-page="@currentPage" asp-route-pageSize="@currentPageSize">
                            Unpaid
                            @if (currentSort.StartsWith("unpaid", global::System.StringComparison.OrdinalIgnoreCase))
                            {
                                <span class="ms-1 text-muted">@(currentSort == "unpaidAsc" ? "▲" : "▼")</span>
                            }
                        </a>
                    </th>
                    <th class="text-end">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var balance in Model.Items)
                {
                    <tr>
                        <td>@balance.EmpNo</td>
                        <td class="text-end">@balance.Annual</td>
                        <td class="text-end">@balance.Sick</td>
                        <td class="text-end">@balance.Unpaid</td>
                        <td class="text-end">
                            <div class="btn-group btn-group-sm" role="group">
                                <a class="btn btn-outline-secondary" asp-action="Details" asp-route-id="@balance.Id">Details</a>
                                <a class="btn btn-outline-primary" asp-action="Edit" asp-route-id="@balance.Id">Edit</a>
                                <a class="btn btn-outline-danger" asp-action="Delete" asp-route-id="@balance.Id">Delete</a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    var totalPages = Model.PageSize > 0 ? (int)global::System.Math.Ceiling(Model.Total / (double)Model.PageSize) : 0;
    if (totalPages > 1)
    {
        <nav aria-label="Leave balances pagination">
            <ul class="pagination justify-content-center">
                <li class="page-item @(Model.Page <= 1 ? "disabled" : string.Empty)">
                    <a class="page-link" asp-action="Index" asp-route-page="@(Model.Page - 1)" asp-route-pageSize="@currentPageSize" asp-route-searchTerm="@searchTerm" asp-route-sortOrder="@currentSort">Previous</a>
                </li>
                @for (var i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(Model.Page == i ? "active" : string.Empty)">
                        <a class="page-link" asp-action="Index" asp-route-page="@i" asp-route-pageSize="@currentPageSize" asp-route-searchTerm="@searchTerm" asp-route-sortOrder="@currentSort">@i</a>
                    </li>
                }
                <li class="page-item @(Model.Page >= totalPages ? "disabled" : string.Empty)">
                    <a class="page-link" asp-action="Index" asp-route-page="@(Model.Page + 1)" asp-route-pageSize="@currentPageSize" asp-route-searchTerm="@searchTerm" asp-route-sortOrder="@currentSort">Next</a>
                </li>
            </ul>
        </nav>
    }
}
else
{
    <div class="alert alert-info" role="alert">
        No leave balances found.
    </div>
}
